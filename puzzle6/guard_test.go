package puzzle6

import (
	"reflect"
	"strings"
	"testing"
)

func TestParseInput6(t *testing.T) {
	got := ParseInput6(strings.NewReader(`....#.....
.........#
..........
..#.......
.......#..
..........
.#..^.....
........#.
#.........
......#...
`))

	expected := &Map{
		height: 10,
		width:  10,
		obstacles: map[Coords]bool{
			{0, 4}: true,
			{1, 9}: true,
			{3, 2}: true,
			{4, 7}: true,
			{6, 1}: true,
			{7, 8}: true,
			{8, 0}: true,
			{9, 6}: true,
		},
		guardPosition:  Coords{6, 4},
		guardDirection: Up,
	}

	if !reflect.DeepEqual(expected, got) {
		t.Errorf("expected %v, got %v", expected, got)
	}
}

func TestCountGuardPositionsVisited(t *testing.T) {
	area := ParseInput6(strings.NewReader(`....#.....
.........#
..........
..#.......
.......#..
..........
.#..^.....
........#.
#.........
......#...
`))
	got := CountGuardPositionsVisited(area)
	if got != 41 {
		t.Errorf("expected 41, got %v", got)
	}
}

func TestCountPossibleNewObstaclesCausingLoops(t *testing.T) {
	area := ParseInput6(strings.NewReader(`....#.....
.........#
..........
..#.......
.......#..
..........
.#..^.....
........#.
#.........
......#...
`))

	got := CountPossibleNewObstaclesCausingLoops(area)
	if got != 6 {
		t.Errorf("expected 6, got %v", got)
	}
}

func TestHasGuardLoop(t *testing.T) {
	area := ParseInput6(strings.NewReader(`....#.....
.........#
..........
..#.......
.......#..
..........
.#..^.....
........#.
#.........
......#...
`))
	got := hasGuardLoop(area)
	if got {
		t.Error("expected false, got true")
	}

	area = ParseInput6(strings.NewReader(`....#.....
.........#
..........
..#.......
.......#..
..........
.#.#^.....
........#.
#.........
......#...
`))

	got = hasGuardLoop(area)
	if !got {
		t.Error("expected true, got false")
	}
}
